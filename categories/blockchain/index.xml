<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blockchain on Richard Jo&#39;s journal</title>
    <link>http://localhost:1313/categories/blockchain/</link>
    <description>Recent content in Blockchain on Richard Jo&#39;s journal</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 May 2024 14:19:29 +0900</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/blockchain/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Security Token Offering (ERC-3643)</title>
      <link>http://localhost:1313/posts/blockchain/sto-erc-3643/</link>
      <pubDate>Fri, 10 May 2024 15:01:00 +0900</pubDate>
      <guid>http://localhost:1313/posts/blockchain/sto-erc-3643/</guid>
      <description>Security Token Offering (ERC-3643) 구성요소 설명 Identify with ONCHAIND 온 체인 내에서 개인을 증명하는 수단, Identity Contract&#xA;ONCHAINID 라는 시스템을 이용해서 지갑과 연결하는 것을 권장한다.&#xA;ONCHAINID는 ERC-734, 735 두개의 표준 스마트 컨트랙트와 그와 관련된 Off-Chain 어플리케이션이다.&#xA;ERC-734는 키의 보안과 유기적인 관리의 역할을 수행한다. 유저의 특정한 목적에 대한 public key를 등록, 삭제, 조회 등 관리 역할을 하고 있다. 컨트랙트는 유저 소유이므로 만약에 사용자가 신원을 추가한다면 새로운 유저에 대한 ERC-734 컨트랙트가 배포되는 것으로 볼 수 있다.</description>
    </item>
    <item>
      <title>Security Token Offering (ERC-1400)</title>
      <link>http://localhost:1313/posts/blockchain/sto-erc-1400/</link>
      <pubDate>Sat, 04 May 2024 15:01:00 +0900</pubDate>
      <guid>http://localhost:1313/posts/blockchain/sto-erc-1400/</guid>
      <description>전 회사에서 STO(Secutiry Token Offering)에 관해서 프로젝트를 진행했는데, 아직 모르고 있는 점이 많아서 따로 정리를 해 둬야겠다는 생각이 들었다. 그래서 이 문서를 작성한다.&#xA;Security Token Offering (ERC-1400) ERC-1400은 ERC-20이나 ERC-777과 같은 기존 토큰 표준들과 호환성을 가지고 있음 ERC-1400의 하위 구성 ERC표준 4가지는 아래와 같다.&#xA;ERC-1410(Partial Fungible Token) 소유자의 토큰을 Partition 세트로 구성하기 위한 표준 인터페이스이다.&#xA;/// @title ERC-1410 Partially Fungible Token Standard /// @dev See https://github.com/SecurityTokenStandard/EIP-Spec interface IERC1410 { // Token Information function balanceOf(address _tokenHolder) external view returns (uint256); function balanceOfByPartition(bytes32 _partition, address _tokenHolder) external view returns (uint256); function partitionsOf(address _tokenHolder) external view returns (bytes32[]); function totalSupply() external view returns (uint256); // Token Transfers function transferByPartition(bytes32 _partition, address _to, uint256 _value, bytes _data) external returns (bytes32); function operatorTransferByPartition(bytes32 _partition, address _from, address _to, uint256 _value, bytes _data, bytes _operatorData) external returns (bytes32); function canTransferByPartition(address _from, address _to, bytes32 _partition, uint256 _value, bytes _data) external view returns (byte, bytes32, bytes32); // Operator Information function isOperator(address _operator, address _tokenHolder) external view returns (bool); function isOperatorForPartition(bytes32 _partition, address _operator, address _tokenHolder) external view returns (bool); // Operator Management function authorizeOperator(address _operator) external; function revokeOperator(address _operator) external; function authorizeOperatorByPartition(bytes32 _partition, address _operator) external; function revokeOperatorByPartition(bytes32 _partition, address _operator) external; // Issuance / Redemption function issueByPartition(bytes32 _partition, address _tokenHolder, uint256 _value, bytes _data) external; function redeemByPartition(bytes32 _partition, uint256 _value, bytes _data) external; function operatorRedeemByPartition(bytes32 _partition, address _tokenHolder, uint256 _value, bytes _operatorData) external; // Transfer Events event TransferByPartition( bytes32 indexed _fromPartition, address _operator, address indexed _from, address indexed _to, uint256 _value, bytes _data, bytes _operatorData ); // Operator Events event AuthorizedOperator(address indexed operator, address indexed tokenHolder); event RevokedOperator(address indexed operator, address indexed tokenHolder); event AuthorizedOperatorByPartition(bytes32 indexed partition, address indexed operator, address indexed tokenHolder); event RevokedOperatorByPartition(bytes32 indexed partition, address indexed operator, address indexed tokenHolder); // Issuance / Redemption Events event IssuedByPartition(bytes32 indexed partition, address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData); event RedeemedByPartition(bytes32 indexed partition, address indexed operator, address indexed from, uint256 amount, bytes operatorData); } 토큰이 partition 단위로 그룹화 된다.</description>
    </item>
    <item>
      <title>Bitcoin Lightning Network (1)</title>
      <link>http://localhost:1313/posts/blockchain/lightning-network1/</link>
      <pubDate>Wed, 31 Jan 2024 15:01:00 +0900</pubDate>
      <guid>http://localhost:1313/posts/blockchain/lightning-network1/</guid>
      <description>Bitcoin Lightning Network (1) What is Bitcoin Lightning Network </description>
    </item>
  </channel>
</rss>
