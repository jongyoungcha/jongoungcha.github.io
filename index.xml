<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Richard Jo&#39;s journal</title>
    <link>https://jongyoungcha.github.io/</link>
    <description>Recent content on Richard Jo&#39;s journal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 16 Feb 2024 00:00:00 +0900</lastBuildDate>
    <atom:link href="https://jongyoungcha.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kmonad Configuration</title>
      <link>https://jongyoungcha.github.io/posts/linux/kmonad/</link>
      <pubDate>Fri, 16 Feb 2024 00:00:00 +0900</pubDate>
      <guid>https://jongyoungcha.github.io/posts/linux/kmonad/</guid>
      <description>Kmonad Configuration kmonad is a keyboard remapping configuration tool&#xA;supporting all OS platforms (Linux, OSX, Windows)&#xA;link: https://github.com/kmonad/kmonad&#xA;Installation (AUR) $ yay -S kmonad-bin Configuration for as a root service (it needs root authorization) $ sudo vi /etc/systemd/system/kmonad.service # kmonad.service file [Unit] Description=laptop keyboard kmonad After=network.target [Service] Type=simple ExecStart=/usr/bin/kmonad /home/witnessjo/richard-settings/.kmonad.kbd Restart=always User=root Group=root [Install] WantedBy=multi-user.target Start daemon and Make it enable # start kmonad service $ sudo systemctl start kmonad.service $ sudo systemctl status kmonad.</description>
    </item>
    <item>
      <title>Rofi Configuration</title>
      <link>https://jongyoungcha.github.io/posts/linux/rofi/</link>
      <pubDate>Sat, 03 Feb 2024 00:00:00 +0900</pubDate>
      <guid>https://jongyoungcha.github.io/posts/linux/rofi/</guid>
      <description>Rofi Configuration Installation $ pacman -S rofi Add command to i3.conf $ vi ~/.config/i3/config # comment # bindsym $mod+d exec --no-startup-id dmenu_run # # add rofi bindsym $mod+d exec --no-startup-id rofi -show run Add paths want to use from rofi $ vi ~/.zprofile export PATH=$PATH:/home/witnessjo/richard-settings/scripts </description>
    </item>
    <item>
      <title>Bitcoin Lightning Network (1)</title>
      <link>https://jongyoungcha.github.io/posts/blockchain/lightning-network1/</link>
      <pubDate>Wed, 31 Jan 2024 15:01:00 +0900</pubDate>
      <guid>https://jongyoungcha.github.io/posts/blockchain/lightning-network1/</guid>
      <description>Bitcoin Lightning Network (1) What is Bitcoin Lightning Network </description>
    </item>
    <item>
      <title>Installing Fabric Binaries</title>
      <link>https://jongyoungcha.github.io/posts/hyperledger/startup-fabric-network/</link>
      <pubDate>Thu, 05 Oct 2023 00:00:00 +0900</pubDate>
      <guid>https://jongyoungcha.github.io/posts/hyperledger/startup-fabric-network/</guid>
      <description>Full Table of Contents Installing Fabric Binaries Start Fabric CA Process Create Certificates for Orderer Organization (Locate MSPs) Create Certificates for Peer Organizations (Locate MSPs) Create Genesis Block Start Up Orderer Nodes Start Up Peer Nodes Create and Join Channel Installing Fabric Binaries Binaries project (https://codeberg.org/richard-jo/rj-fabric-snippets.git)&#xA;git clone https://codeberg.org/richard-jo/rj-fabric-snippets.git cd rj-fabric-snippets Download fabric binaries&#xA;./install-bin.sh cd ./bin Add bin directory of fabric excutables to PATH (bash)&#xA;echo &amp;#34;${rj-fabric-snippets}/bin&amp;#34; &amp;gt;&amp;gt; ~/.bashrc Seting up local fabric network (single-org)</description>
    </item>
    <item>
      <title>Emacs dap-mode debug with eglot-mode</title>
      <link>https://jongyoungcha.github.io/posts/emacs/dap-mode_debugging_with_eglot-mode_20230924/</link>
      <pubDate>Sun, 24 Sep 2023 00:00:00 +0900</pubDate>
      <guid>https://jongyoungcha.github.io/posts/emacs/dap-mode_debugging_with_eglot-mode_20230924/</guid>
      <description>dap-mode debug with eglot-mode 최근에 회사에서 typescript로 block-listener 어플리케이션을 debugging을 해야할 일이 생겼다. emacs예서 debugging 자주 사용하는 플러그인 dap-mode를 주로 사용한다.&#xA;https://github.com/emacs-lsp/dap-mode&#xA;MS에서 debug-server와 debug-client (ex: vscode, vim, emacs, sublime&amp;hellip;)들이 표준화된 방식으로 통신할 수 있는 방식으로 DAP(Debug Adapter Protocol)을 만들었다.&#xA;당연히 MS에서 만든 vscode에서는 이 DAP을 사용한다.&#xA;emacs내에서도 독립적으로 DAP을 사용하는 mode가 존재했으면 좋겠지만 불행히도 그렇지는 못한것 같다.&#xA;dap-mode란 플러그인이 존재하는데, dap-client의 모든 기능을 emacs-lisp으로 다 구현한 것이 아닌&#xA;vscode의 DAP 확장 플러그인을 호출하는 방식 같았다.</description>
    </item>
    <item>
      <title>JAVA Coding Convention</title>
      <link>https://jongyoungcha.github.io/posts/java/java_convention_20220509/</link>
      <pubDate>Mon, 09 May 2022 15:00:00 +0900</pubDate>
      <guid>https://jongyoungcha.github.io/posts/java/java_convention_20220509/</guid>
      <description>Why 이번에 새로이 PG프로젝트가 진행되었다. 그러나 프로젝트 시작 시 미리 코딩컨벤션에 대한 이야기가 되어있지 않았다. 그래서 각 프로젝트 마다 각기 다른 코딩스타일로 작성이 되어버렸다. 이를 통일하기 위해서 Java를 위한 코딩 컨벤션을 정의하고자 한다.&#xA;Defined Rules Package Structure 패키지를 분류하면 아래의 6가지 패키지 분류로 나누어 진다. 패키지 분류와 속하는 패키지 명이다.&#xA;&amp;ndash; Registry (config)&#xA;&amp;ndash; Controller (controller)&#xA;&amp;ndash; Service (service, vo)&#xA;&amp;ndash; Domain (domain)&#xA;&amp;ndash; Repository (repository, dto)&#xA;&amp;ndash; External (external)</description>
    </item>
    <item>
      <title>Profile</title>
      <link>https://jongyoungcha.github.io/posts/profile/</link>
      <pubDate>Sat, 17 Oct 1987 00:00:00 +0900</pubDate>
      <guid>https://jongyoungcha.github.io/posts/profile/</guid>
      <description>Richard Jo, Developer&#xA;LinkedIn: https://www.linkedin.com/in/yeongchan-jo-37193a140 Github: https://github.com/witnessJo Codeberg: https://codeberg.org/witnessJo </description>
    </item>
    <item>
      <title></title>
      <link>https://jongyoungcha.github.io/posts/wj-general/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jongyoungcha.github.io/posts/wj-general/</guid>
      <description>;;; Code: ;;;&#xA;(use-package general :ensure t :config ;; Create a new definer for &amp;lt;space&amp;gt; leader key (general-create-definer wj/leader-keys :keymaps &amp;lsquo;(normal insert visual emacs) :prefix &amp;ldquo;SPC&amp;rdquo; :global-prefix &amp;ldquo;C-SPC&amp;rdquo;)&#xA;;; files (wj/leader-keys &amp;ldquo;f&amp;rdquo; &amp;lsquo;(:ignore t :which-key &amp;ldquo;files&amp;rdquo;) &amp;ldquo;ff&amp;rdquo; &amp;lsquo;(find-file :which-key &amp;ldquo;find file&amp;rdquo;) &amp;ldquo;fs&amp;rdquo; &amp;lsquo;(save-buffer :which-key &amp;ldquo;save file&amp;rdquo;) &amp;ldquo;fr&amp;rdquo; &amp;lsquo;(recentf-open-files :which-key &amp;ldquo;recent files&amp;rdquo;))&#xA;;; buffers (wj/leader-keys &amp;ldquo;m&amp;rdquo; &amp;lsquo;(:ignore t :which-key &amp;ldquo;buffers&amp;rdquo;) &amp;ldquo;mm&amp;rdquo; &amp;lsquo;(ivy-switch-buffer :which-key &amp;ldquo;switch buffer&amp;rdquo;) &amp;ldquo;m,&amp;rdquo; &amp;lsquo;(jong-window-display-buffer-right :which-key &amp;ldquo;switch right buffer&amp;rdquo;) &amp;ldquo;m.</description>
    </item>
  </channel>
</rss>
